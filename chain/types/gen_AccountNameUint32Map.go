// Code generated by gotemplate. DO NOT EDIT.

// Copyright (c) 2015, Emir Pasic. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Package treemap implements a map backed by red-black Tree.
//
// Elements are ordered by key in the map.
//
// Structure is not thread safe.
//
// Reference: http://en.wikipedia.org/wiki/Associative_array
package types

import (
	"encoding/json"
	"fmt"
	"strings"

	"github.com/eosspark/container/templates"
	rbt "github.com/eosspark/container/templates/tree"
	"github.com/eosspark/eos-go/common"
)

// template type Map(K,V,Compare)

func assertAccountNameUint32MapImplementation() {
	var _ templates.Map = (*AccountNameUint32Map)(nil)
}

// Map holds the elements in a red-black Tree
type AccountNameUint32Map struct {
	*rbt.Tree
}

// NewWith instantiates a Tree map with the custom comparator.
func NewAccountNameUint32Map() *AccountNameUint32Map {
	return &AccountNameUint32Map{Tree: rbt.NewWith(common.CompareName, false)}
}

func CopyFromAccountNameUint32Map(tm *AccountNameUint32Map) *AccountNameUint32Map {
	return &AccountNameUint32Map{Tree: rbt.CopyFrom(tm.Tree)}
}

type MultiAccountNameUint32Map = AccountNameUint32Map

func NewMultiAccountNameUint32Map() *MultiAccountNameUint32Map {
	return &AccountNameUint32Map{Tree: rbt.NewWith(common.CompareName, true)}
}

func CopyMultiFromAccountNameUint32Map(tm *AccountNameUint32Map) *AccountNameUint32Map {
	return &AccountNameUint32Map{Tree: rbt.CopyFrom(tm.Tree)}
}

// Put inserts key-value pair into the map.
// Key should adhere to the comparator's type assertion, otherwise method panics.
func (m *AccountNameUint32Map) Put(key common.AccountName, value uint32) {
	m.Tree.Put(key, value)
}

// Get searches the element in the map by key and returns its value or nil if key is not found in Tree.
// Second return parameter is true if key was found, otherwise false.
// Key should adhere to the comparator's type assertion, otherwise method panics.
func (m *AccountNameUint32Map) Get(key common.AccountName) IteratorAccountNameUint32Map {
	return IteratorAccountNameUint32Map{m.Tree.Get(key)}
}

// Remove removes the element from the map by key.
// Key should adhere to the comparator's type assertion, otherwise method panics.
func (m *AccountNameUint32Map) Remove(key common.AccountName) {
	m.Tree.Remove(key)
}

// Keys returns all keys in-order
func (m *AccountNameUint32Map) Keys() []common.AccountName {
	keys := make([]common.AccountName, m.Tree.Size())
	it := m.Tree.Iterator()
	for i := 0; it.Next(); i++ {
		keys[i] = it.Key().(common.AccountName)
	}
	return keys
}

// Values returns all values in-order based on the key.
func (m *AccountNameUint32Map) Values() []uint32 {
	values := make([]uint32, m.Tree.Size())
	it := m.Tree.Iterator()
	for i := 0; it.Next(); i++ {
		values[i] = it.Value().(uint32)
	}
	return values
}

// Each calls the given function once for each element, passing that element's key and value.
func (m *AccountNameUint32Map) Each(f func(key common.AccountName, value uint32)) {
	Iterator := m.Iterator()
	for Iterator.Next() {
		f(Iterator.Key(), Iterator.Value())
	}
}

// Find passes each element of the container to the given function and returns
// the first (key,value) for which the function is true or nil,nil otherwise if no element
// matches the criteria.
func (m *AccountNameUint32Map) Find(f func(key common.AccountName, value uint32) bool) (k common.AccountName, v uint32) {
	Iterator := m.Iterator()
	for Iterator.Next() {
		if f(Iterator.Key(), Iterator.Value()) {
			return Iterator.Key(), Iterator.Value()
		}
	}
	return
}

// String returns a string representation of container
func (m *AccountNameUint32Map) String() string {
	str := "TreeMap\nmap["
	it := m.Iterator()
	for it.Next() {
		str += fmt.Sprintf("%v:%v ", it.Key(), it.Value())
	}
	return strings.TrimRight(str, " ") + "]"

}

// Iterator holding the Iterator's state
type IteratorAccountNameUint32Map struct {
	rbt.Iterator
}

// Iterator returns a stateful Iterator whose elements are key/value pairs.
func (m *AccountNameUint32Map) Iterator() IteratorAccountNameUint32Map {
	return IteratorAccountNameUint32Map{Iterator: m.Tree.Iterator()}
}

// Begin returns First Iterator whose position points to the first element
// Return End Iterator when the map is empty
func (m *AccountNameUint32Map) Begin() IteratorAccountNameUint32Map {
	return IteratorAccountNameUint32Map{m.Tree.Begin()}
}

// End returns End Iterator
func (m *AccountNameUint32Map) End() IteratorAccountNameUint32Map {
	return IteratorAccountNameUint32Map{m.Tree.End()}
}

// Value returns the current element's value.
// Does not modify the state of the Iterator.
func (Iterator *IteratorAccountNameUint32Map) Value() uint32 {
	return Iterator.Iterator.Value().(uint32)
}

// Key returns the current element's key.
// Does not modify the state of the Iterator.
func (Iterator *IteratorAccountNameUint32Map) Key() common.AccountName {
	return Iterator.Iterator.Key().(common.AccountName)
}

func (m *AccountNameUint32Map) LowerBound(key common.AccountName) *IteratorAccountNameUint32Map {
	if itr := m.Tree.LowerBound(key); itr != m.Tree.End() {
		return &IteratorAccountNameUint32Map{itr}
	}
	return nil
}

func (m *AccountNameUint32Map) UpperBound(key common.AccountName) *IteratorAccountNameUint32Map {
	if itr := m.Tree.UpperBound(key); itr != m.Tree.End() {
		return &IteratorAccountNameUint32Map{itr}
	}
	return nil
}

// ToJSON outputs the JSON representation of the map.
type pairAccountNameUint32Map struct {
	Key common.AccountName `json:"key"`
	Val uint32             `json:"val"`
}

func (m *AccountNameUint32Map) MarshalJSON() ([]byte, error) {
	elements := make([]pairAccountNameUint32Map, 0, m.Size())
	it := m.Iterator()
	for it.Next() {
		elements = append(elements, pairAccountNameUint32Map{it.Key(), it.Value()})
	}
	return json.Marshal(&elements)
}

// FromJSON populates the map from the input JSON representation.
func (m *AccountNameUint32Map) UnmarshalJSON(data []byte) error {
	elements := make([]pairAccountNameUint32Map, 0)
	err := json.Unmarshal(data, &elements)
	if err == nil {
		m.Clear()
		for _, pair := range elements {
			m.Put(pair.Key, pair.Val)
		}
	}
	return err
}
