// Code generated by gotemplate. DO NOT EDIT.

package exception

import (
	"bytes"
	"encoding/json"
	"reflect"
	"strconv"

	"github.com/eosspark/eos-go/log"
)

// template type Exception(PARENT,CODE,WHAT)

var StdExceptionName = reflect.TypeOf(StdException{}).Name()

type StdException struct {
	error
	Elog log.Messages
}

func NewStdException(parent error, message log.Message) *StdException {
	return &StdException{parent, log.Messages{message}}
}

func (e StdException) Code() int64 {
	return StdExceptionCode
}

func (e StdException) Name() string {
	return StdExceptionName
}

func (e StdException) What() string {
	return "golang standard error"
}

func (e *StdException) AppendLog(l log.Message) {
	e.Elog = append(e.Elog, l)
}

func (e StdException) GetLog() log.Messages {
	return e.Elog
}

func (e StdException) TopMessage() string {
	for _, l := range e.Elog {
		if msg := l.GetMessage(); msg != "" {
			return msg
		}
	}
	return e.String()
}

func (e StdException) DetailMessage() string {
	var buffer bytes.Buffer
	buffer.WriteString(strconv.Itoa(int(e.Code())))
	buffer.WriteString(" ")
	buffer.WriteString(e.Name())
	buffer.WriteString(": ")
	buffer.WriteString(e.What())
	buffer.WriteString("\n")
	for _, l := range e.Elog {
		buffer.WriteString("[")
		buffer.WriteString(l.GetMessage())
		buffer.WriteString("]")
		buffer.WriteString("\n")
		buffer.WriteString(l.GetContext().String())
		buffer.WriteString("\n")
	}
	return buffer.String()
}

func (e StdException) String() string {
	return e.DetailMessage()
}

func (e StdException) MarshalJSON() ([]byte, error) {
	type Exception struct {
		Code int64  `json:"code"`
		Name string `json:"name"`
		What string `json:"what"`
	}

	except := Exception{
		Code: StdExceptionCode,
		Name: StdExceptionName,
		What: "golang standard error",
	}

	return json.Marshal(except)
}

func (e StdException) Callback(f interface{}) bool {
	switch callback := f.(type) {
	case func(*StdException):
		callback(&e)
		return true
	case func(StdException):
		callback(e)
		return true
	default:
		return false
	}
}
