// Code generated by gotemplate. DO NOT EDIT.

package int

import (
	"unsafe"

	"github.com/eosspark/eos-go/common/container"
	"github.com/eosspark/eos-go/common/container/multiindex"
	. "github.com/eosspark/eos-go/common/container/offsetptr"
)

// template type MultiIndex(SuperIndex,SuperNode,Value,Allocator)

type TestIndex struct {
	super Pointer `*SuperIndex`
	count int
}

const _SizeofTestIndex = unsafe.Sizeof(TestIndex{})

func NewTestIndex() (m *TestIndex) {
	m = (*TestIndex)(alloc.Allocate(_SizeofTestIndex))
	m.super.Set(alloc.Allocate(_SizeofSuperIndexTestIndex))
	m.count = 0

	(*ById)(m.super.Get()).init(m)
	return m
}

func (m *TestIndex) Free() {
	(*ById)(m.super.Get()).free()
	alloc.DeAllocate(unsafe.Pointer(m))
}

/*generic class*/

const _SizeofSuperIndexTestIndex = unsafe.Sizeof(ById{})

type TestIndexNode struct {
	super Pointer `*SuperNode`
}

const _SizeofTestIndexNode = unsafe.Sizeof(TestIndexNode{})

func NewTestIndexNode() *TestIndexNode {
	n := (*TestIndexNode)(alloc.Allocate(_SizeofTestIndexNode))
	n.super.Set(nil)
	return n
}

func (n *TestIndexNode) free() {
	if n != nil {
		alloc.DeAllocate(unsafe.Pointer(n))
	}
}

/*generic class*/

//method for MultiIndex
func (m *TestIndex) GetSuperIndex() interface{} { return m.super }
func (m *TestIndex) GetFinalIndex() interface{} { return nil }

func (m *TestIndex) GetIndex() interface{} {
	return nil
}

func (m *TestIndex) Size() int {
	return m.count
}

func (m *TestIndex) Clear() {
	(*ById)(m.super.Get()).clear()
	m.count = 0
}

func (m *TestIndex) Insert(v int) bool {
	_, res := m.insert(v)
	return res
}

func (m *TestIndex) insert(v int) (*TestIndexNode, bool) {
	fn := NewTestIndexNode()
	n, res := (*ById)(m.super.Get()).insert(v, fn)
	if res {
		fn.super.Set(unsafe.Pointer(n))
		m.count++
		return fn, true
	}

	fn.free()
	return nil, false
}

func (m *TestIndex) Erase(iter multiindex.IteratorType) {
	(*ById)(m.super.Get()).erase_(iter)
}

func (m *TestIndex) erase(n *TestIndexNode) {
	m.count-- // only sub count when MultiIndexNode erase itself
	(*ById)(m.super.Get()).erase((*ByIdNode)(n.super.Get()))
	n.free() // free memory finally
}

func (m *TestIndex) Modify(iter multiindex.IteratorType, mod func(*int)) bool {
	return (*ById)(m.super.Get()).modify_(iter, mod)
}

func (m *TestIndex) modify(mod func(*int), n *TestIndexNode) (*TestIndexNode, bool) {
	defer func() {
		if e := recover(); e != nil {
			container.Logger.Error("#multi modify failed: %v", e)
			m.erase(n)
			m.count--
			panic(e)
		}
	}()
	mod(n.value())
	if sn, res := (*ById)(m.super.Get()).modify((*ByIdNode)(n.super.Get())); !res {
		//delete for failure
		m.count--
		n.free()
		return nil, false
	} else {
		n.super.Set(unsafe.Pointer(sn))
		return n, true
	}
}

func (n *TestIndexNode) GetSuperNode() interface{} { return (*ByIdNode)(n.super.Get()) }
func (n *TestIndexNode) GetFinalNode() interface{} { return nil }

func (n *TestIndexNode) value() *int {
	return (*ByIdNode)(n.super.Get()).value()
}

/// IndexBase
type TestIndexBase struct {
	final Pointer `*MultiIndex`
}

func (i *TestIndexBase) init(final *TestIndex) {
	i.final.Set(unsafe.Pointer(final))
}

func (i *TestIndexBase) free() {
	if i != nil {
		alloc.DeAllocate(unsafe.Pointer(i))
	}
}

func (i *TestIndexBase) clear() {}

func (i *TestIndexBase) GetSuperIndex() interface{} { return nil }

func (i *TestIndexBase) GetFinalIndex() interface{} { return i.final }

func (i *TestIndexBase) insert(v int, fn *TestIndexNode) (*TestIndexBaseNode, bool) {
	return NewTestIndexBaseNode(fn, v), true
}

func (i *TestIndexBase) erase(n *TestIndexBaseNode) {
	n.free()
}

func (i *TestIndexBase) erase_(iter multiindex.IteratorType) {
	container.Logger.Warn("erase iterator doesn't match all index")
}

func (i *TestIndexBase) modify(n *TestIndexBaseNode) (*TestIndexBaseNode, bool) {
	return n, true
}

func (i *TestIndexBase) modify_(iter multiindex.IteratorType, mod func(*int)) bool {
	container.Logger.Warn("modify iterator doesn't match all index")
	return false
}

type TestIndexBaseNode struct {
	final Pointer `*MultiIndexNode`
	pv    Pointer `*Value`
}

const _SizeofTestIndexBaseNode = unsafe.Sizeof(TestIndexBaseNode{})

func NewTestIndexBaseNode(final *TestIndexNode, pv int) (mn *TestIndexBaseNode) {
	mn = (*TestIndexBaseNode)(alloc.Allocate(_SizeofTestIndexBaseNode))
	pvAlloc := alloc.Allocate(unsafe.Sizeof(pv))
	mn.pv.Set(pvAlloc)
	*(*int)(pvAlloc) = pv
	mn.final.Set(unsafe.Pointer(final))
	return
}

func (n *TestIndexBaseNode) free() {
	if n != nil {
		alloc.DeAllocate(n.pv.Get())
		alloc.DeAllocate(unsafe.Pointer(n))
	}
}

func (n *TestIndexBaseNode) value() *int {
	return (*int)(n.pv.Get())
}
