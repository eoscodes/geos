// Code generated by go-bindata.
// sources:
// eosgo.js
// DO NOT EDIT!

package deps

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _eosgoJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\x5d\x6f\xda\x4a\x10\x7d\xf7\xaf\x98\xf8\x21\x5e\x8b\x95\x81\xfb\x72\x11\xbe\xe8\x2a\x4d\xd2\x26\x55\x0b\x91\x4a\x9e\x2c\x2b\xda\x98\x35\xb8\x35\xbb\x74\x77\x9d\x34\x42\xfe\xef\xd5\xac\x3f\xd8\x40\x94\xaa\xfb\xc4\xcc\x99\x9d\x39\xe7\xcc\x02\xc3\x21\xf8\x95\xe6\xa0\x8d\x2a\x32\xe3\xc7\x9e\x37\x1c\xc2\x13\x53\x90\xc3\x0c\x14\xff\x59\x15\x8a\x93\x20\x1a\x72\xa9\xbf\xeb\x20\x6c\xf0\x36\x0f\x33\xc8\x2b\x91\x99\x42\x0a\xe0\xc4\x50\x10\x14\x54\x08\x7b\x2c\xc1\xd3\x83\x9a\x48\x0a\x95\x83\xe0\x29\x72\x20\x67\x22\x91\xe9\x51\xbe\xc7\xcc\xdb\x18\x1e\x24\xc8\x60\x06\xe6\x65\xc7\x65\x7e\xe0\x33\x03\xbf\x1b\xea\xc3\xf9\x79\x07\xc4\xb6\x5f\x85\x19\x16\x82\xe2\xa6\x52\x02\x18\x92\x3a\x1b\x85\x16\x2c\xfa\x74\xd1\xa5\x3b\x13\x04\x7f\x86\x6b\xa5\xa4\x22\xfe\x25\x13\x42\x1a\xc8\x0b\xb1\x82\xad\x5c\x55\x25\x87\xc0\x87\x01\x48\x18\x80\x1f\xf8\x61\x6c\x36\x4a\x3e\x43\x1e\x65\x72\x85\xee\xf8\x5f\x17\x57\xf7\x5f\xae\x1f\xe6\x8b\xe5\xc3\xc7\xc5\xfd\xfc\xca\xa7\x90\xc7\xc7\x82\x6a\x9c\x54\xe2\xa4\x44\xa6\x30\x83\x3d\xf0\x5f\x3b\xa9\x8c\x9e\xc2\xbe\x86\x3a\x46\x1f\x92\x51\x1a\x65\xac\x2c\x49\x19\xb5\x20\x3d\xd8\x4b\xf8\x3b\x36\x09\xb4\x09\x3b\x8c\xd3\x84\xa7\x71\xab\x52\x13\x01\xff\x83\x80\x29\xf0\xf0\x94\x10\x85\x92\x82\x33\x89\x53\xe8\xb6\xfb\xaa\xb8\x6e\xbb\x21\xf1\xae\xba\x2f\xa8\xbb\x0f\xc8\xa2\xf8\x8b\x65\xf5\xcf\x47\x2a\x20\x78\x59\xc2\x0c\x46\x31\x48\xf8\x0f\x54\x54\x72\xb1\x36\x9b\x18\xe4\x60\x70\xa4\x5a\x13\x85\x2f\xe6\x94\x40\xa7\xd9\x22\x35\xe9\x2f\x8d\xa7\x49\x47\x80\xb4\xc3\x69\xb3\x56\xda\x8a\x09\xb1\xd6\x9d\xd1\xc0\x9d\x56\x5c\xd6\xb1\x79\x37\xcb\xe5\xdd\xf5\xfc\xea\x6e\x71\x3b\x5f\x4e\x21\xd8\x18\xb3\x9b\x0e\x87\xe3\x7f\xfe\x8d\x46\xd1\x28\x1a\x4f\x27\x93\xc9\x24\xa0\xaf\x5c\x8c\x9d\x21\x35\xdd\xd7\x69\x13\xdb\x54\x4d\x61\x5f\x53\x48\x7c\x2e\xf5\x5a\xfa\x28\xcf\xf3\xfa\xcd\x67\x8a\x33\xc3\x59\x96\xc9\x4a\x18\x52\x88\x5d\x65\xd0\x94\xce\x75\x0b\x4b\x35\xb3\x40\x12\xb4\x61\x90\xf6\x05\x20\xd8\x96\x43\x87\x63\xe0\x80\xf2\x59\x70\xd5\x83\x36\x72\x50\x96\x99\xe2\x09\x1f\x79\x8b\x37\x71\x5b\x90\x49\xa1\x65\xc9\xa3\x52\xae\x49\x3b\x95\x62\x77\x6a\xbb\xd0\xa6\x36\xb4\xa5\x5c\xea\xe8\xd2\xca\xb8\x68\x65\xbc\x73\xc1\xab\x1d\xf1\xbb\x4a\x6f\x58\xb3\xbd\x46\xf9\xde\x21\x67\x5b\xb9\xec\x6c\xe2\x88\xbf\x14\xaf\xf9\x4b\xe1\x14\xac\x98\x61\x07\x18\x23\x07\xdc\x71\xb5\x2d\xb4\x76\x1b\xb4\xa9\x43\x13\xd7\x84\x76\x3e\x6d\xa6\x50\xec\x46\xfb\x1e\x07\x23\xee\x2a\xbd\xb9\x68\x24\xfd\xe1\x86\x6b\x84\xe1\xda\xe0\x3b\x23\xee\xee\x0b\x91\xe3\xf7\x26\xdb\xb0\x42\x44\x9f\xb8\xb9\x15\xb9\x24\xe1\x09\xb1\x00\xeb\xa6\x01\xfd\xfc\x6d\x31\x8f\xf0\x4f\x40\xac\x8b\xfc\x85\x60\x36\x0c\xbd\xbe\xdb\x63\x29\xb3\x1f\xf6\x17\xbf\x6f\xf8\x01\x53\xb6\x30\x09\x6e\x38\x5b\xd9\x78\x5e\x6d\x83\xf4\x8d\x29\xf6\xfe\xe9\x98\xb6\x2d\x4e\x42\x45\x07\x49\x6b\x6e\x96\xec\xb1\xe4\xfd\x66\x2d\xec\x79\xbf\x03\x00\x00\xff\xff\x76\x3e\x4e\xb0\xaf\x06\x00\x00")

func eosgoJsBytes() ([]byte, error) {
	return bindataRead(
		_eosgoJs,
		"eosgo.js",
	)
}

func eosgoJs() (*asset, error) {
	bytes, err := eosgoJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "eosgo.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"eosgo.js": eosgoJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"eosgo.js": {eosgoJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
